//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.file` struct is generated, and contains static references to 2 files.
  struct file {
    /// Resource file `Gotham Rounded Book.otf`.
    static let gothamRoundedBookOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Gotham Rounded Book", pathExtension: "otf")
    /// Resource file `Gotham Rounded Light.otf`.
    static let gothamRoundedLightOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Gotham Rounded Light", pathExtension: "otf")

    /// `bundle.url(forResource: "Gotham Rounded Book", withExtension: "otf")`
    static func gothamRoundedBookOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gothamRoundedBookOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Gotham Rounded Light", withExtension: "otf")`
    static func gothamRoundedLightOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gothamRoundedLightOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 2 fonts.
  struct font: Rswift.Validatable {
    /// Font `GothamRounded-Book`.
    static let gothamRoundedBook = Rswift.FontResource(fontName: "GothamRounded-Book")
    /// Font `GothamRounded-Light`.
    static let gothamRoundedLight = Rswift.FontResource(fontName: "GothamRounded-Light")

    /// `UIFont(name: "GothamRounded-Book", size: ...)`
    static func gothamRoundedBook(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gothamRoundedBook, size: size)
    }

    /// `UIFont(name: "GothamRounded-Light", size: ...)`
    static func gothamRoundedLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gothamRoundedLight, size: size)
    }

    static func validate() throws {
      if R.font.gothamRoundedBook(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GothamRounded-Book' could not be loaded, is 'Gotham Rounded Book.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.gothamRoundedLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GothamRounded-Light' could not be loaded, is 'Gotham Rounded Light.otf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 37 images.
  struct image {
    /// Image `body_image-clear-day`.
    static let body_imageClearDay = Rswift.ImageResource(bundle: R.hostingBundle, name: "body_image-clear-day")
    /// Image `body_image-clear-night`.
    static let body_imageClearNight = Rswift.ImageResource(bundle: R.hostingBundle, name: "body_image-clear-night")
    /// Image `body_image-cloudy`.
    static let body_imageCloudy = Rswift.ImageResource(bundle: R.hostingBundle, name: "body_image-cloudy")
    /// Image `body_image-fog`.
    static let body_imageFog = Rswift.ImageResource(bundle: R.hostingBundle, name: "body_image-fog")
    /// Image `body_image-hail`.
    static let body_imageHail = Rswift.ImageResource(bundle: R.hostingBundle, name: "body_image-hail")
    /// Image `body_image-partly-cloudy-day`.
    static let body_imagePartlyCloudyDay = Rswift.ImageResource(bundle: R.hostingBundle, name: "body_image-partly-cloudy-day")
    /// Image `body_image-partly-cloudy-night`.
    static let body_imagePartlyCloudyNight = Rswift.ImageResource(bundle: R.hostingBundle, name: "body_image-partly-cloudy-night")
    /// Image `body_image-rain`.
    static let body_imageRain = Rswift.ImageResource(bundle: R.hostingBundle, name: "body_image-rain")
    /// Image `body_image-sleet`.
    static let body_imageSleet = Rswift.ImageResource(bundle: R.hostingBundle, name: "body_image-sleet")
    /// Image `body_image-snow`.
    static let body_imageSnow = Rswift.ImageResource(bundle: R.hostingBundle, name: "body_image-snow")
    /// Image `body_image-thunderstorm`.
    static let body_imageThunderstorm = Rswift.ImageResource(bundle: R.hostingBundle, name: "body_image-thunderstorm")
    /// Image `body_image-tornado`.
    static let body_imageTornado = Rswift.ImageResource(bundle: R.hostingBundle, name: "body_image-tornado")
    /// Image `body_image-wind`.
    static let body_imageWind = Rswift.ImageResource(bundle: R.hostingBundle, name: "body_image-wind")
    /// Image `checkmark_check`.
    static let checkmark_check = Rswift.ImageResource(bundle: R.hostingBundle, name: "checkmark_check")
    /// Image `checkmark_uncheck`.
    static let checkmark_uncheck = Rswift.ImageResource(bundle: R.hostingBundle, name: "checkmark_uncheck")
    /// Image `close`.
    static let close = Rswift.ImageResource(bundle: R.hostingBundle, name: "close")
    /// Image `delete`.
    static let delete = Rswift.ImageResource(bundle: R.hostingBundle, name: "delete")
    /// Image `header_image-clear-day`.
    static let header_imageClearDay = Rswift.ImageResource(bundle: R.hostingBundle, name: "header_image-clear-day")
    /// Image `header_image-clear-night`.
    static let header_imageClearNight = Rswift.ImageResource(bundle: R.hostingBundle, name: "header_image-clear-night")
    /// Image `header_image-cloudy`.
    static let header_imageCloudy = Rswift.ImageResource(bundle: R.hostingBundle, name: "header_image-cloudy")
    /// Image `header_image-fog`.
    static let header_imageFog = Rswift.ImageResource(bundle: R.hostingBundle, name: "header_image-fog")
    /// Image `header_image-hail`.
    static let header_imageHail = Rswift.ImageResource(bundle: R.hostingBundle, name: "header_image-hail")
    /// Image `header_image-partly-cloudy-day`.
    static let header_imagePartlyCloudyDay = Rswift.ImageResource(bundle: R.hostingBundle, name: "header_image-partly-cloudy-day")
    /// Image `header_image-partly-cloudy-night`.
    static let header_imagePartlyCloudyNight = Rswift.ImageResource(bundle: R.hostingBundle, name: "header_image-partly-cloudy-night")
    /// Image `header_image-rain`.
    static let header_imageRain = Rswift.ImageResource(bundle: R.hostingBundle, name: "header_image-rain")
    /// Image `header_image-sleet`.
    static let header_imageSleet = Rswift.ImageResource(bundle: R.hostingBundle, name: "header_image-sleet")
    /// Image `header_image-snow`.
    static let header_imageSnow = Rswift.ImageResource(bundle: R.hostingBundle, name: "header_image-snow")
    /// Image `header_image-thunderstorm`.
    static let header_imageThunderstorm = Rswift.ImageResource(bundle: R.hostingBundle, name: "header_image-thunderstorm")
    /// Image `header_image-tornado`.
    static let header_imageTornado = Rswift.ImageResource(bundle: R.hostingBundle, name: "header_image-tornado")
    /// Image `header_image-wind`.
    static let header_imageWind = Rswift.ImageResource(bundle: R.hostingBundle, name: "header_image-wind")
    /// Image `humidity_icon`.
    static let humidity_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "humidity_icon")
    /// Image `pressure_icon`.
    static let pressure_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "pressure_icon")
    /// Image `search_icon`.
    static let search_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "search_icon")
    /// Image `settings_icon`.
    static let settings_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings_icon")
    /// Image `square_checkmark_check`.
    static let square_checkmark_check = Rswift.ImageResource(bundle: R.hostingBundle, name: "square_checkmark_check")
    /// Image `square_checkmark_uncheck`.
    static let square_checkmark_uncheck = Rswift.ImageResource(bundle: R.hostingBundle, name: "square_checkmark_uncheck")
    /// Image `wind_icon`.
    static let wind_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "wind_icon")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "body_image-clear-day", bundle: ..., traitCollection: ...)`
    static func body_imageClearDay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.body_imageClearDay, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "body_image-clear-night", bundle: ..., traitCollection: ...)`
    static func body_imageClearNight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.body_imageClearNight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "body_image-cloudy", bundle: ..., traitCollection: ...)`
    static func body_imageCloudy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.body_imageCloudy, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "body_image-fog", bundle: ..., traitCollection: ...)`
    static func body_imageFog(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.body_imageFog, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "body_image-hail", bundle: ..., traitCollection: ...)`
    static func body_imageHail(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.body_imageHail, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "body_image-partly-cloudy-day", bundle: ..., traitCollection: ...)`
    static func body_imagePartlyCloudyDay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.body_imagePartlyCloudyDay, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "body_image-partly-cloudy-night", bundle: ..., traitCollection: ...)`
    static func body_imagePartlyCloudyNight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.body_imagePartlyCloudyNight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "body_image-rain", bundle: ..., traitCollection: ...)`
    static func body_imageRain(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.body_imageRain, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "body_image-sleet", bundle: ..., traitCollection: ...)`
    static func body_imageSleet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.body_imageSleet, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "body_image-snow", bundle: ..., traitCollection: ...)`
    static func body_imageSnow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.body_imageSnow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "body_image-thunderstorm", bundle: ..., traitCollection: ...)`
    static func body_imageThunderstorm(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.body_imageThunderstorm, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "body_image-tornado", bundle: ..., traitCollection: ...)`
    static func body_imageTornado(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.body_imageTornado, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "body_image-wind", bundle: ..., traitCollection: ...)`
    static func body_imageWind(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.body_imageWind, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "checkmark_check", bundle: ..., traitCollection: ...)`
    static func checkmark_check(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkmark_check, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "checkmark_uncheck", bundle: ..., traitCollection: ...)`
    static func checkmark_uncheck(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkmark_uncheck, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "close", bundle: ..., traitCollection: ...)`
    static func close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.close, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "delete", bundle: ..., traitCollection: ...)`
    static func delete(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.delete, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "header_image-clear-day", bundle: ..., traitCollection: ...)`
    static func header_imageClearDay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.header_imageClearDay, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "header_image-clear-night", bundle: ..., traitCollection: ...)`
    static func header_imageClearNight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.header_imageClearNight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "header_image-cloudy", bundle: ..., traitCollection: ...)`
    static func header_imageCloudy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.header_imageCloudy, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "header_image-fog", bundle: ..., traitCollection: ...)`
    static func header_imageFog(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.header_imageFog, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "header_image-hail", bundle: ..., traitCollection: ...)`
    static func header_imageHail(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.header_imageHail, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "header_image-partly-cloudy-day", bundle: ..., traitCollection: ...)`
    static func header_imagePartlyCloudyDay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.header_imagePartlyCloudyDay, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "header_image-partly-cloudy-night", bundle: ..., traitCollection: ...)`
    static func header_imagePartlyCloudyNight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.header_imagePartlyCloudyNight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "header_image-rain", bundle: ..., traitCollection: ...)`
    static func header_imageRain(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.header_imageRain, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "header_image-sleet", bundle: ..., traitCollection: ...)`
    static func header_imageSleet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.header_imageSleet, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "header_image-snow", bundle: ..., traitCollection: ...)`
    static func header_imageSnow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.header_imageSnow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "header_image-thunderstorm", bundle: ..., traitCollection: ...)`
    static func header_imageThunderstorm(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.header_imageThunderstorm, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "header_image-tornado", bundle: ..., traitCollection: ...)`
    static func header_imageTornado(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.header_imageTornado, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "header_image-wind", bundle: ..., traitCollection: ...)`
    static func header_imageWind(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.header_imageWind, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "humidity_icon", bundle: ..., traitCollection: ...)`
    static func humidity_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.humidity_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pressure_icon", bundle: ..., traitCollection: ...)`
    static func pressure_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pressure_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "search_icon", bundle: ..., traitCollection: ...)`
    static func search_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.search_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "settings_icon", bundle: ..., traitCollection: ...)`
    static func settings_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "square_checkmark_check", bundle: ..., traitCollection: ...)`
    static func square_checkmark_check(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.square_checkmark_check, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "square_checkmark_uncheck", bundle: ..., traitCollection: ...)`
    static func square_checkmark_uncheck(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.square_checkmark_uncheck, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "wind_icon", bundle: ..., traitCollection: ...)`
    static func wind_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wind_icon, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 20 localization keys.
    struct localizable {
      /// en translation: %d %%
      ///
      /// Locales: en
      static let humidity = Rswift.StringResource(key: "humidity", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: %d hpa
      ///
      /// Locales: en
      static let pressure = Rswift.StringResource(key: "pressure", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: %s m/s
      ///
      /// Locales: en
      static let wind_speed_metric = Rswift.StringResource(key: "wind_speed_metric", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: %s mph
      ///
      /// Locales: en
      static let wind_speed_imperial = Rswift.StringResource(key: "wind_speed_imperial", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: %s°
      ///
      /// Locales: en
      static let temp_degree = Rswift.StringResource(key: "temp_degree", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: %s°C
      ///
      /// Locales: en
      static let celsius = Rswift.StringResource(key: "celsius", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: %s°F
      ///
      /// Locales: en
      static let fahrenheit = Rswift.StringResource(key: "fahrenheit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: &lon=%f
      ///
      /// Locales: en
      static let location_lng = Rswift.StringResource(key: "location_lng", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: &units=%s
      ///
      /// Locales: en
      static let units = Rswift.StringResource(key: "units", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: An error occurred while fetching data.
      ///
      /// Locales: en
      static let error_alert_message = Rswift.StringResource(key: "error_alert_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Conditions
      ///
      /// Locales: en
      static let conditions_label = Rswift.StringResource(key: "conditions_label", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Done
      ///
      /// Locales: en
      static let done = Rswift.StringResource(key: "done", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Error
      ///
      /// Locales: en
      static let error_alert_title = Rswift.StringResource(key: "error_alert_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: High
      ///
      /// Locales: en
      static let temp_high_label = Rswift.StringResource(key: "temp_high_label", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Locations
      ///
      /// Locales: en
      static let locations_label = Rswift.StringResource(key: "locations_label", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Low
      ///
      /// Locales: en
      static let temp_low_label = Rswift.StringResource(key: "temp_low_label", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: OK
      ///
      /// Locales: en
      static let alert_ok_action = Rswift.StringResource(key: "alert_ok_action", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: The dequeued cell is not an instance of %s.
      ///
      /// Locales: en
      static let cell_error = Rswift.StringResource(key: "cell_error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Units
      ///
      /// Locales: en
      static let units_label = Rswift.StringResource(key: "units_label", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: lat=%f
      ///
      /// Locales: en
      static let location_lat = Rswift.StringResource(key: "location_lat", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)

      /// en translation: %d %%
      ///
      /// Locales: en
      static func humidity(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("humidity", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "humidity"
        }

        let format = NSLocalizedString("humidity", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %d hpa
      ///
      /// Locales: en
      static func pressure(_ value1: Int, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("pressure", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "pressure"
        }

        let format = NSLocalizedString("pressure", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %s m/s
      ///
      /// Locales: en
      static func wind_speed_metric(_ value1: UnsafePointer<CChar>, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("wind_speed_metric", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wind_speed_metric"
        }

        let format = NSLocalizedString("wind_speed_metric", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %s mph
      ///
      /// Locales: en
      static func wind_speed_imperial(_ value1: UnsafePointer<CChar>, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("wind_speed_imperial", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wind_speed_imperial"
        }

        let format = NSLocalizedString("wind_speed_imperial", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %s°
      ///
      /// Locales: en
      static func temp_degree(_ value1: UnsafePointer<CChar>, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("temp_degree", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "temp_degree"
        }

        let format = NSLocalizedString("temp_degree", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %s°C
      ///
      /// Locales: en
      static func celsius(_ value1: UnsafePointer<CChar>, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("celsius", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "celsius"
        }

        let format = NSLocalizedString("celsius", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: %s°F
      ///
      /// Locales: en
      static func fahrenheit(_ value1: UnsafePointer<CChar>, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("fahrenheit", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "fahrenheit"
        }

        let format = NSLocalizedString("fahrenheit", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: &lon=%f
      ///
      /// Locales: en
      static func location_lng(_ value1: Double, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("location_lng", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "location_lng"
        }

        let format = NSLocalizedString("location_lng", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: &units=%s
      ///
      /// Locales: en
      static func units(_ value1: UnsafePointer<CChar>, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("units", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "units"
        }

        let format = NSLocalizedString("units", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: An error occurred while fetching data.
      ///
      /// Locales: en
      static func error_alert_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error_alert_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error_alert_message"
        }

        return NSLocalizedString("error_alert_message", bundle: bundle, comment: "")
      }

      /// en translation: Conditions
      ///
      /// Locales: en
      static func conditions_label(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("conditions_label", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "conditions_label"
        }

        return NSLocalizedString("conditions_label", bundle: bundle, comment: "")
      }

      /// en translation: Done
      ///
      /// Locales: en
      static func done(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("done", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "done"
        }

        return NSLocalizedString("done", bundle: bundle, comment: "")
      }

      /// en translation: Error
      ///
      /// Locales: en
      static func error_alert_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error_alert_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error_alert_title"
        }

        return NSLocalizedString("error_alert_title", bundle: bundle, comment: "")
      }

      /// en translation: High
      ///
      /// Locales: en
      static func temp_high_label(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("temp_high_label", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "temp_high_label"
        }

        return NSLocalizedString("temp_high_label", bundle: bundle, comment: "")
      }

      /// en translation: Locations
      ///
      /// Locales: en
      static func locations_label(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("locations_label", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "locations_label"
        }

        return NSLocalizedString("locations_label", bundle: bundle, comment: "")
      }

      /// en translation: Low
      ///
      /// Locales: en
      static func temp_low_label(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("temp_low_label", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "temp_low_label"
        }

        return NSLocalizedString("temp_low_label", bundle: bundle, comment: "")
      }

      /// en translation: OK
      ///
      /// Locales: en
      static func alert_ok_action(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("alert_ok_action", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "alert_ok_action"
        }

        return NSLocalizedString("alert_ok_action", bundle: bundle, comment: "")
      }

      /// en translation: The dequeued cell is not an instance of %s.
      ///
      /// Locales: en
      static func cell_error(_ value1: UnsafePointer<CChar>, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("cell_error", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "cell_error"
        }

        let format = NSLocalizedString("cell_error", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Units
      ///
      /// Locales: en
      static func units_label(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("units_label", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "units_label"
        }

        return NSLocalizedString("units_label", bundle: bundle, comment: "")
      }

      /// en translation: lat=%f
      ///
      /// Locales: en
      static func location_lat(_ value1: Double, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("location_lat", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "location_lat"
        }

        let format = NSLocalizedString("location_lat", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
